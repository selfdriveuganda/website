/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MaintenanceRouteImport } from './routes/maintenance'
import { Route as AllRouteImport } from './routes/_all'
import { Route as AllIndexRouteImport } from './routes/_all/index'
import { Route as AllTermsAndConditionsRouteImport } from './routes/_all/terms-and-conditions'
import { Route as AllServicesRouteImport } from './routes/_all/services'
import { Route as AllPrivacyPolicyRouteImport } from './routes/_all/privacy-policy'
import { Route as AllContactRouteImport } from './routes/_all/contact'
import { Route as AllPackagesIndexRouteImport } from './routes/_all/packages/index'
import { Route as AllDestinationsIndexRouteImport } from './routes/_all/destinations/index'
import { Route as AllCarsIndexRouteImport } from './routes/_all/cars/index'
import { Route as AllBlogsIndexRouteImport } from './routes/_all/blogs/index'
import { Route as AllPackagesPackageSlugRouteImport } from './routes/_all/packages/$packageSlug'
import { Route as AllCarsCarSlugRouteImport } from './routes/_all/cars/$carSlug'
import { Route as AllBlogsBlogSlugRouteImport } from './routes/_all/blogs/$blogSlug'
import { Route as AllDestinationsDestinationSlugIndexRouteImport } from './routes/_all/destinations/$destinationSlug/index'

const MaintenanceRoute = MaintenanceRouteImport.update({
  id: '/maintenance',
  path: '/maintenance',
  getParentRoute: () => rootRouteImport,
} as any)
const AllRoute = AllRouteImport.update({
  id: '/_all',
  getParentRoute: () => rootRouteImport,
} as any)
const AllIndexRoute = AllIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AllRoute,
} as any)
const AllTermsAndConditionsRoute = AllTermsAndConditionsRouteImport.update({
  id: '/terms-and-conditions',
  path: '/terms-and-conditions',
  getParentRoute: () => AllRoute,
} as any)
const AllServicesRoute = AllServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => AllRoute,
} as any)
const AllPrivacyPolicyRoute = AllPrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => AllRoute,
} as any)
const AllContactRoute = AllContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => AllRoute,
} as any)
const AllPackagesIndexRoute = AllPackagesIndexRouteImport.update({
  id: '/packages/',
  path: '/packages/',
  getParentRoute: () => AllRoute,
} as any)
const AllDestinationsIndexRoute = AllDestinationsIndexRouteImport.update({
  id: '/destinations/',
  path: '/destinations/',
  getParentRoute: () => AllRoute,
} as any)
const AllCarsIndexRoute = AllCarsIndexRouteImport.update({
  id: '/cars/',
  path: '/cars/',
  getParentRoute: () => AllRoute,
} as any)
const AllBlogsIndexRoute = AllBlogsIndexRouteImport.update({
  id: '/blogs/',
  path: '/blogs/',
  getParentRoute: () => AllRoute,
} as any)
const AllPackagesPackageSlugRoute = AllPackagesPackageSlugRouteImport.update({
  id: '/packages/$packageSlug',
  path: '/packages/$packageSlug',
  getParentRoute: () => AllRoute,
} as any)
const AllCarsCarSlugRoute = AllCarsCarSlugRouteImport.update({
  id: '/cars/$carSlug',
  path: '/cars/$carSlug',
  getParentRoute: () => AllRoute,
} as any)
const AllBlogsBlogSlugRoute = AllBlogsBlogSlugRouteImport.update({
  id: '/blogs/$blogSlug',
  path: '/blogs/$blogSlug',
  getParentRoute: () => AllRoute,
} as any)
const AllDestinationsDestinationSlugIndexRoute =
  AllDestinationsDestinationSlugIndexRouteImport.update({
    id: '/destinations/$destinationSlug/',
    path: '/destinations/$destinationSlug/',
    getParentRoute: () => AllRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/maintenance': typeof MaintenanceRoute
  '/contact': typeof AllContactRoute
  '/privacy-policy': typeof AllPrivacyPolicyRoute
  '/services': typeof AllServicesRoute
  '/terms-and-conditions': typeof AllTermsAndConditionsRoute
  '/': typeof AllIndexRoute
  '/blogs/$blogSlug': typeof AllBlogsBlogSlugRoute
  '/cars/$carSlug': typeof AllCarsCarSlugRoute
  '/packages/$packageSlug': typeof AllPackagesPackageSlugRoute
  '/blogs': typeof AllBlogsIndexRoute
  '/cars': typeof AllCarsIndexRoute
  '/destinations': typeof AllDestinationsIndexRoute
  '/packages': typeof AllPackagesIndexRoute
  '/destinations/$destinationSlug': typeof AllDestinationsDestinationSlugIndexRoute
}
export interface FileRoutesByTo {
  '/maintenance': typeof MaintenanceRoute
  '/contact': typeof AllContactRoute
  '/privacy-policy': typeof AllPrivacyPolicyRoute
  '/services': typeof AllServicesRoute
  '/terms-and-conditions': typeof AllTermsAndConditionsRoute
  '/': typeof AllIndexRoute
  '/blogs/$blogSlug': typeof AllBlogsBlogSlugRoute
  '/cars/$carSlug': typeof AllCarsCarSlugRoute
  '/packages/$packageSlug': typeof AllPackagesPackageSlugRoute
  '/blogs': typeof AllBlogsIndexRoute
  '/cars': typeof AllCarsIndexRoute
  '/destinations': typeof AllDestinationsIndexRoute
  '/packages': typeof AllPackagesIndexRoute
  '/destinations/$destinationSlug': typeof AllDestinationsDestinationSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_all': typeof AllRouteWithChildren
  '/maintenance': typeof MaintenanceRoute
  '/_all/contact': typeof AllContactRoute
  '/_all/privacy-policy': typeof AllPrivacyPolicyRoute
  '/_all/services': typeof AllServicesRoute
  '/_all/terms-and-conditions': typeof AllTermsAndConditionsRoute
  '/_all/': typeof AllIndexRoute
  '/_all/blogs/$blogSlug': typeof AllBlogsBlogSlugRoute
  '/_all/cars/$carSlug': typeof AllCarsCarSlugRoute
  '/_all/packages/$packageSlug': typeof AllPackagesPackageSlugRoute
  '/_all/blogs/': typeof AllBlogsIndexRoute
  '/_all/cars/': typeof AllCarsIndexRoute
  '/_all/destinations/': typeof AllDestinationsIndexRoute
  '/_all/packages/': typeof AllPackagesIndexRoute
  '/_all/destinations/$destinationSlug/': typeof AllDestinationsDestinationSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/maintenance'
    | '/contact'
    | '/privacy-policy'
    | '/services'
    | '/terms-and-conditions'
    | '/'
    | '/blogs/$blogSlug'
    | '/cars/$carSlug'
    | '/packages/$packageSlug'
    | '/blogs'
    | '/cars'
    | '/destinations'
    | '/packages'
    | '/destinations/$destinationSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/maintenance'
    | '/contact'
    | '/privacy-policy'
    | '/services'
    | '/terms-and-conditions'
    | '/'
    | '/blogs/$blogSlug'
    | '/cars/$carSlug'
    | '/packages/$packageSlug'
    | '/blogs'
    | '/cars'
    | '/destinations'
    | '/packages'
    | '/destinations/$destinationSlug'
  id:
    | '__root__'
    | '/_all'
    | '/maintenance'
    | '/_all/contact'
    | '/_all/privacy-policy'
    | '/_all/services'
    | '/_all/terms-and-conditions'
    | '/_all/'
    | '/_all/blogs/$blogSlug'
    | '/_all/cars/$carSlug'
    | '/_all/packages/$packageSlug'
    | '/_all/blogs/'
    | '/_all/cars/'
    | '/_all/destinations/'
    | '/_all/packages/'
    | '/_all/destinations/$destinationSlug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AllRoute: typeof AllRouteWithChildren
  MaintenanceRoute: typeof MaintenanceRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/maintenance': {
      id: '/maintenance'
      path: '/maintenance'
      fullPath: '/maintenance'
      preLoaderRoute: typeof MaintenanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_all': {
      id: '/_all'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AllRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_all/': {
      id: '/_all/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AllIndexRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/terms-and-conditions': {
      id: '/_all/terms-and-conditions'
      path: '/terms-and-conditions'
      fullPath: '/terms-and-conditions'
      preLoaderRoute: typeof AllTermsAndConditionsRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/services': {
      id: '/_all/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof AllServicesRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/privacy-policy': {
      id: '/_all/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof AllPrivacyPolicyRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/contact': {
      id: '/_all/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof AllContactRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/packages/': {
      id: '/_all/packages/'
      path: '/packages'
      fullPath: '/packages'
      preLoaderRoute: typeof AllPackagesIndexRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/destinations/': {
      id: '/_all/destinations/'
      path: '/destinations'
      fullPath: '/destinations'
      preLoaderRoute: typeof AllDestinationsIndexRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/cars/': {
      id: '/_all/cars/'
      path: '/cars'
      fullPath: '/cars'
      preLoaderRoute: typeof AllCarsIndexRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/blogs/': {
      id: '/_all/blogs/'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof AllBlogsIndexRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/packages/$packageSlug': {
      id: '/_all/packages/$packageSlug'
      path: '/packages/$packageSlug'
      fullPath: '/packages/$packageSlug'
      preLoaderRoute: typeof AllPackagesPackageSlugRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/cars/$carSlug': {
      id: '/_all/cars/$carSlug'
      path: '/cars/$carSlug'
      fullPath: '/cars/$carSlug'
      preLoaderRoute: typeof AllCarsCarSlugRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/blogs/$blogSlug': {
      id: '/_all/blogs/$blogSlug'
      path: '/blogs/$blogSlug'
      fullPath: '/blogs/$blogSlug'
      preLoaderRoute: typeof AllBlogsBlogSlugRouteImport
      parentRoute: typeof AllRoute
    }
    '/_all/destinations/$destinationSlug/': {
      id: '/_all/destinations/$destinationSlug/'
      path: '/destinations/$destinationSlug'
      fullPath: '/destinations/$destinationSlug'
      preLoaderRoute: typeof AllDestinationsDestinationSlugIndexRouteImport
      parentRoute: typeof AllRoute
    }
  }
}

interface AllRouteChildren {
  AllContactRoute: typeof AllContactRoute
  AllPrivacyPolicyRoute: typeof AllPrivacyPolicyRoute
  AllServicesRoute: typeof AllServicesRoute
  AllTermsAndConditionsRoute: typeof AllTermsAndConditionsRoute
  AllIndexRoute: typeof AllIndexRoute
  AllBlogsBlogSlugRoute: typeof AllBlogsBlogSlugRoute
  AllCarsCarSlugRoute: typeof AllCarsCarSlugRoute
  AllPackagesPackageSlugRoute: typeof AllPackagesPackageSlugRoute
  AllBlogsIndexRoute: typeof AllBlogsIndexRoute
  AllCarsIndexRoute: typeof AllCarsIndexRoute
  AllDestinationsIndexRoute: typeof AllDestinationsIndexRoute
  AllPackagesIndexRoute: typeof AllPackagesIndexRoute
  AllDestinationsDestinationSlugIndexRoute: typeof AllDestinationsDestinationSlugIndexRoute
}

const AllRouteChildren: AllRouteChildren = {
  AllContactRoute: AllContactRoute,
  AllPrivacyPolicyRoute: AllPrivacyPolicyRoute,
  AllServicesRoute: AllServicesRoute,
  AllTermsAndConditionsRoute: AllTermsAndConditionsRoute,
  AllIndexRoute: AllIndexRoute,
  AllBlogsBlogSlugRoute: AllBlogsBlogSlugRoute,
  AllCarsCarSlugRoute: AllCarsCarSlugRoute,
  AllPackagesPackageSlugRoute: AllPackagesPackageSlugRoute,
  AllBlogsIndexRoute: AllBlogsIndexRoute,
  AllCarsIndexRoute: AllCarsIndexRoute,
  AllDestinationsIndexRoute: AllDestinationsIndexRoute,
  AllPackagesIndexRoute: AllPackagesIndexRoute,
  AllDestinationsDestinationSlugIndexRoute:
    AllDestinationsDestinationSlugIndexRoute,
}

const AllRouteWithChildren = AllRoute._addFileChildren(AllRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AllRoute: AllRouteWithChildren,
  MaintenanceRoute: MaintenanceRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
